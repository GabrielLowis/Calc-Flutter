// Importa os pacotes necessários.
import 'package:flutter/material.dart';
import 'package:math_expressions/math_expressions.dart'; // Biblioteca para avaliar expressões matemáticas.

void main() {
  runApp(const CalculatorApp()); // Inicia o aplicativo chamando a classe CalculatorApp.
}

// Define a estrutura principal do aplicativo como um widget sem estado (StatelessWidget).
class CalculatorApp extends StatelessWidget {
  const CalculatorApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false, // Remove a faixa de depuração.
      home: const CalculatorScreen(), // Define a tela inicial do aplicativo.
    );
  }
}

// Define a tela da calculadora como um widget com estado (StatefulWidget).
class CalculatorScreen extends StatefulWidget {
  const CalculatorScreen({super.key});

  @override
  _CalculatorScreenState createState() => _CalculatorScreenState();
}

// Estado da tela da calculadora.
class _CalculatorScreenState extends State<CalculatorScreen> {
  String input = ""; // Armazena a expressão digitada pelo usuário.
  String output = "0"; // Exibe o resultado da operação.

  // Método chamado ao pressionar um botão da calculadora.
  void onButtonPressed(String value) {
    setState(() {
      if (value == "AC") { // Limpa tudo.
        input = "";
        output = "0";
      } else if (value == "⌫") { // Apaga o último caractere.
        if (input.isNotEmpty) {
          input = input.substring(0, input.length - 1);
        }
      } else if (value == "=") { // Calcula o resultado.
        calcularResultado();
      } else { // Adiciona o valor pressionado à expressão.
        input += value;
      }
    });
  }

  // Método que processa a expressão matemática e calcula o resultado.
  void calcularResultado() {
    try {
      // Substitui símbolos para garantir compatibilidade com a biblioteca.
      String expression = input.replaceAll("×", "*").replaceAll("÷", "/");

      Parser parser = Parser(); // Cria um analisador para interpretar a expressão.
      Expression exp = parser.parse(expression); // Converte a string em uma expressão matemática.
      ContextModel cm = ContextModel(); // Define um contexto para a avaliação.
      double eval = exp.evaluate(EvaluationType.REAL, cm); // Avalia a expressão.

      output = eval.toString(); // Atualiza o resultado a ser exibido.
    } catch (e) {
      output = "Erro"; // Caso ocorra erro na avaliação.
    }

    setState(() {}); // Atualiza a interface.
  }

  // Método para construir um botão da calculadora.
  Widget buildButton(String text) {
    return Expanded(
      child: ElevatedButton(
        onPressed: () => onButtonPressed(text), // Define a ação ao clicar no botão.
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.all(20),
          backgroundColor: Colors.purple.shade300, // Cor de fundo dos botões.
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10), // Borda arredondada.
          ),
        ),
        child: Text(
          text,
          style: const TextStyle(
            fontSize: 24,
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.purple.shade700, // Define o fundo da tela.
      body: Column(
        children: [
          // Exibição da expressão digitada e do resultado.
          Expanded(
            child: Container(
              alignment: Alignment.bottomRight,
              padding: const EdgeInsets.all(20),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.end,
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text(
                    input, // Exibe a expressão.
                    style: const TextStyle(fontSize: 32, color: Colors.white),
                  ),
                  Text(
                    output, // Exibe o resultado.
                    style: const TextStyle(
                      fontSize: 42,
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Teclado numérico da calculadora.
          Column(
            children: [
              ["AC", "⌫", "÷", "×"],
              ["7", "8", "9", "-"],
              ["4", "5", "6", "+"],
              ["1", "2", "3", "="],
              ["0", ".", "^"],
            ].map((row) { // Mapeia cada linha de botões.
              return Row(
                children: row.map((text) => buildButton(text)).toList(), // Cria os botões dinamicamente.
              );
            }).toList(),
          ),
        ],
      ),
    );
  }
}
